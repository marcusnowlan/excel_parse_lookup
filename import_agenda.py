# -*- coding: utf-8 -*-
"""import_agenda

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lzthuXmOHfpAflfgtE60GWWc1eqEvkO3
"""

# import_agenda
# Imports table from an Excel file (the file path of which is in second argument
# in the command line) and stores the data in the database interview_test.db
import sys
import xlrd
import sqlite3
sys.path.append(".")
from db_table import db_table

# Creates a new db_table object (table linked to SQLite database
# interview_test.db). All sections of the table are added (date, start time,
# end time, session/subsession, title, location, description, and speaker), as
# well as 4 columns that indicate unique identifying information (date, start 
# time, title, and location) of a session's parent session (if it is a 
# subsession):
agenda_table = db_table("agenda", {"date" : "text", "time_start" : "text", 
                               "time_end" : "text", 
                               "session_or_subsession" : "text", 
                               "title" : "text", "location" : "text",
                               "description" : "text", "speaker" : "text",
                               "sub_of_date" : "text", "sub_of_time" : "text",
                               "sub_of_title" : "text", 
                               "sub_of_location" : "text"})

# Opens the Excel workbook:
book = xlrd.open_workbook(sys.argv[1])
sh = book.sheet_by_index(0)

# Parses the Excel data, and puts it into a list called 'data', which contains
# one list (called 'line') per row in the Excel table:
data = []
for j in range(sh.nrows-15):
  line = []
  for k in range(sh.ncols + 1):
    # For the first 8 values of k, append the session's information (date, start
    # time, end time, session/subsession, title, location, description, and 
    # speaker) into its 'line' list within the larger 'data' list:
    if k < 8:
      line.append(sh.cell_value(rowx=j+15, colx=k).replace("'", "''"))
    # If k == 8, all 8 data points (date, start time, end time, 
    # session/subsession, title, location, description, and speaker) have
    # already been placed into the line containing data for this session, and 
    # now we will fill 4 additional colummns with information (date, start time,
    # title, and location) that identifies the session's parent session, if it
    # has one:
    else:
      # If the session is a subsession, find its parent session, which is the
      # first session above it that is not a subsession:
      if sh.cell_value(rowx=j+15, colx=3) == 'Sub':
        notFound = True
        counter = j - 1
        while notFound:
          # If the parent session is found, input its date, start time, title,
          # and location into the last 4 columns of the subsession, so that if
          # the subsession's parent is selected (in lookup_agenda.py), it can
          # be identified:
          if sh.cell_value(rowx=counter+15, colx=3) == 'Session':
            line.append(sh.cell_value(rowx=counter+15, colx=0).replace("'", "''"))
            line.append(sh.cell_value(rowx=counter+15, colx=1).replace("'", "''"))
            line.append(sh.cell_value(rowx=counter+15, colx=4).replace("'", "''"))
            line.append(sh.cell_value(rowx=counter+15, colx=5).replace("'", "''"))
            notFound = False
          else:
            counter -= 1
      # If the session is not a subsession, fill the last 4 columns of
      # information with 'None' (as it does not have a parent session):
      else:
        line.append('None')
        line.append('None')
        line.append('None')
        line.append('None')
  # Add the session information (12 column entries) into the 'data' list:
  data.append(tuple(line[:]))

# For each 'entry' (a list containing a session's information (8 pieces of 
# information), plus the 4 pieces of unique identifying information of its 
# parent session), add the information from the list into the appropriate column
# in the db_table 'agenda_table' (which will in turn add it to the database 
# interview_test.db):
for entry in data:
  agenda_table.insert({"date" : entry[0], "time_start" : entry[1], 
                       "time_end" : entry[2], 
                       "session_or_subsession" : entry[3], 
                       "title" : entry[4], "location" : entry[5],
                       "description" : entry[6], "speaker" : entry[7], 
                       "sub_of_date" : entry[8], "sub_of_time" : entry[9],
                       "sub_of_title" : entry[10], 
                       "sub_of_location" : entry[11]})